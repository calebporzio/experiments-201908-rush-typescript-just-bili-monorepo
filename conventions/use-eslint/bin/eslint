#!/usr/bin/env node

/* eslint-disable */

/**
 * In Rush.js, if we do not use this script, we would need to import
 * the required module in EVERY PACKAGES.
 * This exposes it for other modules to use.
 */

// See comment also @frontend-bindings/conventions-use-jest in reporter.js #IsCiServer
// https://docs.gitlab.com/ee/ci/variables/#syntax-of-environment-variables-in-job-scripts
const processEnvKeys = Object.keys(process.env);
const isCI = processEnvKeys.includes('CI_SERVER');

const hasReportUnusedDisableDirectives = process.argv.includes(
  '--report-unused-disable-directives',
);
if (!isCI && !hasReportUnusedDisableDirectives) {
  process.argv.push('--report-unused-disable-directives');
}

Promise.all([require('eslint/bin/eslint.js')]);

/*
 * SET ASIDE FOR NOW ------------------------------------------
 *
 * If we were to try to replace just-scripts.
 * We'd have to emulate the following
 *
 * But below, is bit too complex.
 * Refer to rel=#ToolsBundlingHelpersESLintJustTasks
 *
const { exec } = require('child_process');
const fssync = require('fs');
const { resolve, join, normalize, dirname } = require('path');

const cmdRequirePath = 'eslint/bin/eslint.js';
const localPath = dirname(__dirname);
const command = resolve(
  normalize(join(localPath, 'node_modules', cmdRequirePath)),
);
const isCommandExists = fssync.existsSync(command);
async function run(processObj) {
  const [, , ...args] = processObj.argv;
  const cwd = processObj.cwd();
  const cmd = [command, ...args].join(' ');
  console.log(`Executing ${cmd} in ${cwd}`);
  return new Promise((resolve, reject) => {
    exec(cmd, { cwd, stdio: 'inherit' }, (error, stdout) => {
      if (error) {
        reject(error);
      }

      resolve(stdout);
    });
  });
}

const hasIgnorePath = process.argv.includes('--ignore-path');
if (!hasIgnorePath) {
  const ignorePath = resolve(normalize(join(localPath, '.eslintignore')));
  process.argv.push('--ignore-path');
  process.argv.push(ignorePath);
}

const hasConfig = process.argv.includes('--config');
if (!hasConfig) {
  const configPath = resolve(normalize(join(localPath, '.eslintrc.js')));
  process.argv.push('--config');
  process.argv.push(configPath);
}

if (fssync.existsSync(command)) {
  (async () => {
    try {
      await run(process);
    } catch (e) {
      const message = `An error occured: ${e}`;
      throw new Error(message);
    }
  })();
} else {
  const message = `Command "${command}" not found, is the package installed`;
  throw new Error(message);
}
*/
